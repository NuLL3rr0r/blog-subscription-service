#  (The MIT License)
#
#  Copyright (c) 2016 - 2020 Mamadou Babaei
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.


IF ( BUILD_SERVICE )
    FILE ( GLOB_RECURSE SERVICE_SOURCE_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} * )

    SET ( SERVICE_BIN_FILE "${SERVICE_BIN_NAME}" )

    IF ( NOT WIN32 AND NOT MINGW )
        ADD_EXECUTABLE ( ${SERVICE_BIN_FILE} ${SERVICE_SOURCE_FILES} )
    ELSE (  )
        CONFIGURE_FILE ( "${SERVICE_APP_ICON_FILE}" "${CMAKE_CURRENT_BINARY_DIR}/${SERVICE_APP_ICON_FILE}"
            COPYONLY )
        CONFIGURE_FILE ( "${SERVICE_RC_FILE}" "${CMAKE_CURRENT_BINARY_DIR}/${SERVICE_RC_FILE}"
            @ONLY NEWLINE_STYLE CRLF )
        SET ( CMAKE_RC_COMPILER_INIT windres )
        ENABLE_LANGUAGE( RC )
        SET ( CMAKE_RC_COMPILE_OBJECT "<CMAKE_RC_COMPILER> <FLAGS> -O coff <DEFINES> -i <SOURCE> -o <OBJECT>")
        ADD_EXECUTABLE ( ${SERVICE_BIN_FILE} ${SERVICE_SOURCE_FILES} "${CMAKE_CURRENT_BINARY_DIR}/${SERVICE_RC_FILE}" )
    ENDIF (  )

    FOREACH ( FLAG ${CXX11_FEATURE_LIST} )
        SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE}
            APPEND PROPERTY COMPILE_DEFINITIONS ${FLAG} )
    ENDFOREACH ( FLAG ${CXX11_FEATURE_LIST} )

    INCLUDE_DIRECTORIES ( SYSTEM "../include" )

    IF ( ${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD" AND KVM_LIBRARY )
        TARGET_LINK_LIBRARIES ( ${SERVICE_BIN_FILE}
            ${KVM_LIBRARY}
        )
    ENDIF (  )

    TARGET_LINK_LIBRARIES ( ${SERVICE_BIN_FILE}
        ${CORELIB_BIN_NAME}
        ${Boost_LIBRARIES}
        ${LIBSTATGRAB_LIBRARY}
        ${MAGICKPP_LIBRARIES}
        ${PQXX_LIBRARY}
        ${WT_LIBRARY}
    )

    IF ( "${WT_APPLICATION_TYPE}" STREQUAL "FASTCGI" )
        TARGET_LINK_LIBRARIES ( ${SERVICE_BIN_FILE}
            ${WT_FCGI_LIBRARY}
        )
    ELSEIF ( "${WT_APPLICATION_TYPE}" STREQUAL "WTHTTPD" )
        TARGET_LINK_LIBRARIES ( ${SERVICE_BIN_FILE}
            ${WT_HTTPD_LIBRARY}
        )
    ENDIF (  )

    IF ( DEFINED SERVICE_DEFINES )
        SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "${SERVICE_DEFINES}" )
    ENDIF (  )

    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_BUILD_COMPILER=\"${BUILD_INFO_COMPILER}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_BUILD_HOST=\"${BUILD_INFO_HOST}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_BUILD_PROCESSOR=\"${BUILD_INFO_PROCESSOR}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_BUILD_SYSTEM=\"${BUILD_INFO_SYSTEM}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_COMPANY_NAME=\"${PRODUCT_COMPANY_NAME}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_COPYRIGHT_HOLDER=\"${PRODUCT_COPYRIGHT_HOLDER}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_COPYRIGHT_YEAR=\"${PRODUCT_COPYRIGHT_YEAR}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_COPYRIGHT=\"${PRODUCT_COPYRIGHT}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_INTERNAL_NAME=\"${SERVICE_PRODUCT_INTERNAL_NAME}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_NAME=\"${SERVICE_PRODUCT_NAME}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_VERSION_MAJOR=${SERVICE_PRODUCT_VERSION_MAJOR}" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_VERSION_MINOR=${SERVICE_PRODUCT_VERSION_MINOR}" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_VERSION_PATCH=${SERVICE_PRODUCT_VERSION_PATCH}" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_VERSION_REVISION=\"${PRODUCT_VERSION_REVISION}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_VERSION=\"${SERVICE_PRODUCT_VERSION}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_DESCRIPTION=\"${SERVICE_PRODUCT_DESCRIPTION}\"" )

    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "UNKNOWN_ERROR=\"${UNKNOWN_ERROR}\"" )

    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "ROOT_USERNAME=\"${ROOT_USERNAME}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "ROOT_INITIAL_EMAIL=\"${ROOT_INITIAL_EMAIL}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "ROOT_INITIAL_PASSWORD=\"${ROOT_INITIAL_PASSWORD}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "CRYPTO_KEY=\"${CRYPTO_KEY}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "CRYPTO_IV=\"${CRYPTO_IV}\"" )

    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "INITAL_EN_HOME_PAGE_URL=\"${INITAL_EN_HOME_PAGE_URL}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "INITAL_FA_HOME_PAGE_URL=\"${INITAL_FA_HOME_PAGE_URL}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "INITAL_EN_HOME_PAGE_TITLE=\"${INITAL_EN_HOME_PAGE_TITLE}\"" )
    SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "INITAL_FA_HOME_PAGE_TITLE=\"${INITAL_FA_HOME_PAGE_TITLE}\"" )

    IF ( "${PGSQL_CONNECTION_STRING}" STREQUAL "" )
        SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PGSQL_HOST=\"${PGSQL_HOST}\"" )
        SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PGSQL_PORT=\"${PGSQL_PORT}\"" )
        SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PGSQL_DATABASE=\"${PGSQL_DATABASE}\"" )
        SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PGSQL_USER=\"${PGSQL_USER}\"" )
        SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PGSQL_PASSWORD=\"${PGSQL_PASSWORD}\"" )
    ELSE (  ) # Use connection strings
        SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PGSQL_CONNECTION_STRING=\"${PGSQL_CONNECTION_STRING}\"" )
    ENDIF (  )

    IF ( DEFINED PREFERRED_MAGICK_IMPLEMENTATION )
        SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "MAGICKPP_GM=0" )
        SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "MAGICKPP_IM=1" )
        IF ( ${PREFERRED_MAGICK_IMPLEMENTATION} MATCHES "GM" )
            SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "MAGICKPP_BACKEND=0" )
        ELSEIF ( ${PREFERRED_MAGICK_IMPLEMENTATION} MATCHES "IM" )
            SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "MAGICKPP_BACKEND=1" )
            SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "MAGICKCORE_QUANTUM_DEPTH=8" )
            SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "MAGICKCORE_HDRI_ENABLE=${MAGICKCORE_HDRI_ENABLE}" )
        ENDIF (  )
    ENDIF (  )

    IF ( DEFINED GDPR_COMPLIANCE )
        SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "GDPR_COMPLIANCE=${GDPR_COMPLIANCE}" )
    ENDIF (  )

    IF ( DEFINED CEREAL_THREAD_SAFE )
        SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "CEREAL_THREAD_SAFE=${CEREAL_THREAD_SAFE}" )
    ENDIF (  )

    IF ( DEFINED APPLICATION_TEMP_PATH )
        SET_PROPERTY ( TARGET ${SERVICE_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "APPLICATION_TEMP_PATH=\"${APPLICATION_TEMP_PATH}\"" )
    ENDIF (  )


    IF ( CXX_GCC AND GCC_STRIP_EXECUTABLES )
        ADD_CUSTOM_COMMAND ( TARGET ${SERVICE_BIN_FILE}
            POST_BUILD
            COMMAND strip $<TARGET_FILE:SERVICE_BIN_FILE>
            COMMAND strip -R.comment $<TARGET_FILE:SERVICE_BIN_FILE>
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        )
    ENDIF (  )

    IF ( WIN32 AND MINGW )
        IF ( CORELIB_LINK_TYPE STREQUAL "SHARED" )
            GET_PROPERTY( CORELIB_LIBRARY_PATH TARGET ${CORELIB_BIN_NAME} PROPERTY LOCATION )

            ADD_CUSTOM_COMMAND ( TARGET ${SERVICE_BIN_FILE}
                POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${CORELIB_LIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${BOOST_DATE_TIME_LIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${BOOST_FILESYSTEM_LIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${BOOST_RANDOM_LIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${BOOST_REGEXLIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${BOOST_SYSTEM_LIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${BOOST_THREAD_LIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${CRYPTOPP_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${CURLPP_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${LIBB64_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${LIBCURL_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${LIBZIP_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${MAXMINDDB_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${PGSQL_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${PQXX_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${SODIUM_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${VMIME_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${XERCESCPP_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${WT_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${WT_FCGI_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${WT_HTTPD_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
            )
        ENDIF (  )
    ENDIF (  )

    IF ( DEFINED APP_ROOT_DIR )
        EXECUTE_PROCESS (
            COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_ROOT_DIR}/bin"
            COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_ROOT_DIR}/db"
            COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_ROOT_DIR}/etc"
            COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_ROOT_DIR}/fonts"
            COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_ROOT_DIR}/i18n"
            COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_ROOT_DIR}/log"
            COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_ROOT_DIR}/templates"
            COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_ROOT_DIR}/tmp"
            COMMAND ${CMAKE_COMMAND} -E make_directory "${APP_ROOT_DIR}/www"
        )

        INSTALL ( FILES
            "${CMAKE_CURRENT_SOURCE_DIR}/resources/wt_config.xml"
            DESTINATION "${APP_ROOT_DIR}/etc"
            PERMISSIONS
            OWNER_READ
            GROUP_READ
            WORLD_READ
        )

        INSTALL ( DIRECTORY
            "${CMAKE_CURRENT_SOURCE_DIR}/i18n"
            DESTINATION "${APP_ROOT_DIR}"
            FILE_PERMISSIONS
            OWNER_READ
            GROUP_READ
            WORLD_READ
            DIRECTORY_PERMISSIONS
            OWNER_READ OWNER_EXECUTE # OTHERWISE YOU CANNOT ACCESS ANYTHING INSIDE THOSE DIRECTORIES
            GROUP_READ GROUP_EXECUTE # OTHERWISE YOU CANNOT ACCESS ANYTHING INSIDE THOSE DIRECTORIES
            WORLD_READ WORLD_EXECUTE # OTHERWISE YOU CANNOT ACCESS ANYTHING INSIDE THOSE DIRECTORIES
        )

        INSTALL ( DIRECTORY
            "${CMAKE_CURRENT_SOURCE_DIR}/resources/assets/fonts"
            DESTINATION "${APP_ROOT_DIR}"
            FILE_PERMISSIONS
            OWNER_READ
            GROUP_READ
            WORLD_READ
            DIRECTORY_PERMISSIONS
            OWNER_READ OWNER_EXECUTE # OTHERWISE YOU CANNOT ACCESS ANYTHING INSIDE THOSE DIRECTORIES
            GROUP_READ GROUP_EXECUTE # OTHERWISE YOU CANNOT ACCESS ANYTHING INSIDE THOSE DIRECTORIES
            WORLD_READ WORLD_EXECUTE # OTHERWISE YOU CANNOT ACCESS ANYTHING INSIDE THOSE DIRECTORIES
        )

        INSTALL ( FILES
            "${CMAKE_CURRENT_BINARY_DIR}/${SERVICE_BIN_FILE}"
            DESTINATION "${APP_ROOT_DIR}/www"
            PERMISSIONS
            OWNER_READ OWNER_EXECUTE
            GROUP_READ GROUP_EXECUTE
            WORLD_READ WORLD_EXECUTE
        )


        SET ( GULP_DIR "${CMAKE_CURRENT_BINARY_DIR}/gulp" )
        SET ( GULP_MODULES_DIR "${GULP_DIR}/node_modules" )

        IF( NOT EXISTS ${GULP_MODULES_DIR} )
            MESSAGE ( STATUS "Installing local Gulp modules... " )
        ELSE (  )
            MESSAGE ( STATUS "Installing or Updating local Gulp modules... " )
        ENDIF (  )

        MESSAGE ( STATUS "Relax! This may take a while..." )

        FILE ( MAKE_DIRECTORY ${GULP_DIR} )
        FILE ( MAKE_DIRECTORY ${GULP_MODULES_DIR} )
        FILE ( COPY "${CMAKE_CURRENT_SOURCE_DIR}/resources/assets/gulp/package.json"
                DESTINATION ${GULP_DIR} )

        EXECUTE_PROCESS (
            COMMAND ${NPM_EXECUTABLE} install
                WORKING_DIRECTORY "${GULP_DIR}"
                RESULT_VARIABLE GULP_NPM_RESULT
                OUTPUT_VARIABLE GULP_NPM_OUTPUT
                OUTPUT_QUIET
                ERROR_QUIET
        )

        IF ( GULP_NPM_RESULT EQUAL 0 )
            MESSAGE ( STATUS "Local Gulp modules installation completed successfully" )
        ELSE (  )
            MESSAGE ( "${OUTPUT_VARIABLE}" )
            MESSAGE ( FATAL_ERROR "Local Gulp modules installation has failed" )
        ENDIF (  )

        ADD_CUSTOM_COMMAND ( TARGET ${SERVICE_BIN_FILE}
            POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy_directory
                "${CMAKE_CURRENT_SOURCE_DIR}/resources/assets/gulp" "${GULP_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy_directory
                "${WT_RESOURCES_DIR}" "${GULP_DIR}/resources"
            COMMAND ${CMAKE_COMMAND} -E copy_directory
                "${CMAKE_CURRENT_SOURCE_DIR}/resources/assets/bootstrap/css" "${GULP_DIR}/resources/themes/bootstrap/3"
            COMMAND ${CMAKE_COMMAND} -E copy_directory
                "${CMAKE_CURRENT_SOURCE_DIR}/resources/assets/font-awesome" "${GULP_DIR}/resources/font-awesome"
            COMMAND ${CMAKE_COMMAND} -E copy_directory
                "${CMAKE_CURRENT_SOURCE_DIR}/resources/assets/tinymce" "${GULP_DIR}/resources/tinymce"
            COMMAND ${GULP_EXECUTABLE} default
                WORKING_DIRECTORY "${GULP_DIR}"
        )

        INSTALL ( DIRECTORY
            "${GULP_DIR}/templates"
            DESTINATION "${APP_ROOT_DIR}"
            FILE_PERMISSIONS
            OWNER_READ
            GROUP_READ
            WORLD_READ
            DIRECTORY_PERMISSIONS
            OWNER_READ OWNER_EXECUTE # OTHERWISE YOU CANNOT ACCESS ANYTHING INSIDE THOSE DIRECTORIES
            GROUP_READ GROUP_EXECUTE # OTHERWISE YOU CANNOT ACCESS ANYTHING INSIDE THOSE DIRECTORIES
            WORLD_READ WORLD_EXECUTE # OTHERWISE YOU CANNOT ACCESS ANYTHING INSIDE THOSE DIRECTORIES
        )

        INSTALL ( DIRECTORY
            "${GULP_DIR}/output/www"
            DESTINATION "${APP_ROOT_DIR}"
            FILE_PERMISSIONS
            OWNER_READ
            GROUP_READ
            WORLD_READ
            DIRECTORY_PERMISSIONS
            OWNER_READ OWNER_EXECUTE # OTHERWISE YOU CANNOT ACCESS ANYTHING INSIDE THOSE DIRECTORIES
            GROUP_READ GROUP_EXECUTE # OTHERWISE YOU CANNOT ACCESS ANYTHING INSIDE THOSE DIRECTORIES
            WORLD_READ WORLD_EXECUTE # OTHERWISE YOU CANNOT ACCESS ANYTHING INSIDE THOSE DIRECTORIES
        )
    ENDIF (  )
ENDIF (  )


COTIRE ( ${SERVICE_BIN_FILE} )
